# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

name: '$(Build.DefinitionName)-$(date:yyyyMMdd)-$(rev:.r)'

trigger:
  branches:
    include:
      - master
      - refs/tags/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- task: gitversion/setup@0
  inputs:
    versionSpec: '0.0.0'
    includePrerelease: true

- task: gitversion/execute@0
  inputs:
    useConfigFile: true
    configFilePath: 'GitVersion.yml'
    updateAssemblyInfo: false

- task: PowerShell@2
  displayName: Set the name of the build based on GitVersion.SemVer
  inputs:
    targetType: 'inline'
    script: |
      [string] $buildName = "$(SEMVER)"
      Write-Host "Setting the name of the build to '$buildName'."
      Write-Host "##vso[build.updatebuildnumber]$buildName"

- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: 3.1.x

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'
    feedsToUse: config
    nugetConfigPath: NuGet.config


- task: DotNetCoreCLI@2
  displayName: Build Reliance.Web
  inputs:
    command: 'build'
    projects: '**/Reliance.Web.csproj'
    arguments: --output $(System.DefaultWorkingDirectory)/WebApp --configuration Release

- task: DotNetCoreCLI@2
  displayName: Build Reliance.Db.Scripts.MsSql
  inputs:
    command: 'build'
    projects: '**/Reliance.Db.Scripts.MsSql.csproj'
    arguments: --output $(System.DefaultWorkingDirectory)/DbUpdates --configuration Release

- task: DotNetCoreCLI@2
  displayName: Build Tests
  inputs:
    command: 'build'
    projects: '**/Reliance.Web.Test.csproj'
    arguments: --output $(System.DefaultWorkingDirectory)/Tests --configuration Release

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/DbUpdates'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/DbUpdates'
    CleanTargetFolder: true
    OverWrite: true

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'drop'